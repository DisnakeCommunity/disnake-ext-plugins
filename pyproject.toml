[tool.poetry]
name = "disnake-ext-plugins"
version = "0.2.4"
description = "An extension for disnake providing a robust alternative to cogs."
authors = ["Chromosomologist <chromosomologist@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [
    {include = "disnake/ext/plugins", from="src"}]
repository = "https://github.com/Chromosomologist/disnake-ext-plugins"
keywords = [
    "disnake",
    "disnake.ext",
    "discord",
    "cogs",
]
classifiers=[
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.8"
disnake = "^2.0"
typing-extensions = "^4.3.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.18.1"
taskipy = "^1.10.1"

black="~22.8.0"
pyright="~1.1.272"
slotscheck="~0.15.0"
ruff = "^0.0.292"

[tool.poetry.scripts]
dev-symlink = "scripts.symlink:_main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
pythonVersion = "3.8"
include = ["src/disnake/ext/plugins"]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportPrivateUsage = false
reportImportCycles = false

[tool.black]
line-length = 100

[tool.ruff]
target-version = "py38"
line-length = 100

exclude = [
    "examples",
]

select = ["ALL"]
ignore = [
    # `self` and `cls` do not need annotations.
    "ANN101", "ANN102",
    # Magic methods do not need documentation.
    "D105",
    # Class docstrings are at the class level.
    "D107",
    # Docstrings start on first line after class definition (incompatibility between D203 and D211).
    "D203",
    # Docstrings start on the first line (`"""text\n..."""`; incompatibility between D212 and D213).
    "D213",
    # TODO / HACK comments do not need to be flagged.
    "FIX002", "FIX004",
    # Pyright error codes are obnoxiously long.
    "PGH003",
    # TODO comments do not need to have an author or issue specified.
    "TD002", "TD003",
]

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[tool.ruff.pylint]
max-args = 10

[tool.ruff.per-file-ignores]
"scripts/*" = [
    # Allow printing in scripts.
    "T201",
]
"__init__.py" = [
    # Wildcard imports are fine in __init__; duplicating exports is a pain to maintain.
    "F403",
    "F405",
]
